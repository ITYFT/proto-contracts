syntax = "proto3";
package admin_auth;
import "google/protobuf/empty.proto";

enum AuthError{
    LoginAlreadyInUse = 0;
    UserNotFound = 1;
    InvalidLogin = 2;
    InvalidPassword = 3;
    InvalidToken = 4;
    StaleToken = 5;
}

message AdminAuthRegisterUserGrpcRequest{
    string Login = 1;
    string Password = 2;
}

message AdminAuthRegisterUserGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthUpdatePasswordGrpcRequest{
    string Login = 1;
    string NewPassword = 2;
}

message AdminAuthUpdatePasswordGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthenticateGrpcRequest{
    string Login = 1;
    string Password = 2;
}

message AdminAuthenticateGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthRefreshGrpcRequest{
    string RefreshToken = 1;
}

message AdminAuthRefreshGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthValidateJwtRequest{
    string AuthToken = 1;
}

message AdminAuthValidateJwtResponse{
    optional AuthError Error = 1;
}

message AdminAuthCreateGroupGrpcRequest{
    string Name = 1;
    string Description = 2;
}

message AdminAuthCreateGroupGrpcResponse{
    optional string GroupId = 1;
}

message AdminAuthCreatePermissionGrpcRequest{
    string Name = 1;
    string Description = 2;
    repeated string Resources = 3;
}

message AdminAuthCreatePermissionGrpcResponse{
    optional string PermissionId = 1;
}

message AdminAuthGoogleGrpcRequest{
    string IdToken = 1;
}

message AdminAuthGoogleGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthAddUserToGroupGrpcRequest{
    string UserLogin = 1;
    string GroupId = 2;
}

message AdminAuthRemoveUserFromGroupGrpcRequest{
    string UserLogin = 1;
    string GroupId = 2;
}

message AdminAuthAddPermissionToGroupGrpcRequest{
    string GroupId = 1;
    string PermissionName = 2;
}

message AdminAuthRemovePermissionFromGroupGrpcRequest{
    string GroupId = 1;
    string PermissionName = 2;
}

message AdminAuthGetGroupsGrpcRequest{
    optional string Login = 1;
    optional string GroupName = 2;
}

message AdminAuthPermissionGrpcModel{
    string Name = 1;
    repeated string Resources = 2;
}

message AdminAuthGroupGrpcModel{
    string GroupId = 1;
    string Name = 2;
    optional string Description = 3;
    repeated AdminAuthPermissionGrpcModel Permissions = 4;
}

message AdminAuthGetGroupsGrpcResponse{
    repeated AdminAuthGroupGrpcModel Groups = 1;
}

message AdminAuthGetPermissionsGrpcRequest{
    optional string Login = 1;
    optional string GroupName = 2;
}

message AdminAuthGetPermissionsGrpcResponse{
    repeated AdminAuthPermissionGrpcModel Permissions = 1;
}

message AdminAuthCreateResourceGrpcRequest{
    string Resource = 1;
    string Description = 2;
}

message AdminAuthCreateResourceGrpcResponse{
    optional string Resource = 1;
    optional string Description = 2;
}

message AdminAuthAddResourceToPermissionGrpcRequest{
    string PermissionName = 1;
    string Resource = 2;
}

message AdminAuthAddResourceToPermissionGrpcResponse{}

message AdminAuthGroupGrpcResponse{
    AdminAuthGroupGrpcModel Group = 1;
}

message AdminAuthGroupUsersGrpcResponse{
    repeated string UserLogins = 1;
}

service AdminAuthService {
    rpc GetPermissions(AdminAuthGetPermissionsGrpcRequest) returns (AdminAuthGetPermissionsGrpcResponse);
    rpc GetGroups(AdminAuthGetGroupsGrpcRequest) returns (AdminAuthGetGroupsGrpcResponse);
    rpc AddUserToGroup(AdminAuthAddUserToGroupGrpcRequest) returns (AdminAuthGroupUsersGrpcResponse);
    rpc RemoveUserFromGroup(AdminAuthRemoveUserFromGroupGrpcRequest) returns (AdminAuthGroupUsersGrpcResponse);
    rpc AddPermissionToGroup(AdminAuthAddPermissionToGroupGrpcRequest) returns (AdminAuthGroupGrpcResponse);
    rpc RemovePermissionFromGroup(AdminAuthRemovePermissionFromGroupGrpcRequest) returns (AdminAuthGroupGrpcResponse);
    rpc Register(AdminAuthRegisterUserGrpcRequest) returns (AdminAuthRegisterUserGrpcResponse);
    rpc AuthenticateGoogle(AdminAuthGoogleGrpcRequest) returns (AdminAuthGoogleGrpcResponse);
    rpc Refresh(AdminAuthRefreshGrpcRequest) returns (AdminAuthRefreshGrpcResponse);
    rpc UpdatePassword(AdminAuthUpdatePasswordGrpcRequest) returns (AdminAuthUpdatePasswordGrpcResponse);
    rpc Authenticate(AdminAuthenticateGrpcRequest) returns (AdminAuthenticateGrpcResponse);
    rpc CreateGroup(AdminAuthCreateGroupGrpcRequest) returns (AdminAuthCreateGroupGrpcResponse);
    rpc CreatePermission(AdminAuthCreatePermissionGrpcRequest) returns (AdminAuthCreatePermissionGrpcResponse);
    rpc CreateResource(AdminAuthCreateResourceGrpcRequest) returns (AdminAuthCreateResourceGrpcResponse);
    rpc AddResourceToPermission(AdminAuthAddResourceToPermissionGrpcRequest) returns (AdminAuthAddResourceToPermissionGrpcResponse);
    rpc Validate(AdminAuthValidateJwtRequest) returns (AdminAuthValidateJwtResponse);
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
