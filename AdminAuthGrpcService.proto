syntax = "proto3";
package admin_auth;
import "google/protobuf/empty.proto";

enum AuthError{
    LoginAlreadyInUse = 0;
    UserNotFound = 1;
    InvalidCredentials = 2;
    InvalidToken = 3;
    StaleToken = 4;
}

message AdminAuthRegisterUserGrpcRequest{
    string Login = 1;
    string Password = 2;
}

message AdminAuthRegisterUserGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthUpdatePasswordGrpcRequest{
    string Login = 1;
    string NewPassword = 2;
}

message AdminAuthUpdatePasswordGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthenticateGrpcRequest{
    string Login = 1;
    string Password = 2;
}

message AdminAuthenticateGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthRefreshGrpcRequest{
    string RefreshToken = 1;
}

message AdminAuthRefreshGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthValidateJwtRequest{
    string AuthToken = 1;
}

message AdminAuthValidateJwtResponse{
    optional AuthError Error = 1;
}

message AdminAuthCreateGroupGrpcRequest{
    string Name = 1;
    string Description = 2;
}

message AdminAuthCreateGroupGrpcResponse{
    optional string GroupId = 1;
}

message AdminAuthGoogleGrpcRequest{
    string IdToken = 1;
}

message AdminAuthGoogleGrpcResponse{
    optional AuthError Error = 1;
    optional string AuthToken = 2;
    optional string RefreshToken = 3;
}

message AdminAuthAddUserToGroupGrpcRequest{
    string UserLogin = 1;
    string GroupId = 2;
}

message AdminAuthRemoveUserFromGroupGrpcRequest{
    string UserLogin = 1;
    string GroupId = 2;
}

message AdminAuthAddResourceToGroupGrpcRequest{
    string GroupId = 1;
    string Resource = 2;
}

message AdminAuthRemoveResourceFromGroupGrpcRequest{
    string GroupName = 1;
    string Resource = 2;
}

message AdminAuthGetGroupsGrpcRequest{
    optional string Login = 1;
    optional string GroupName = 2;
}

message AdminAuthGroupGrpcModel{
    string GroupId = 1;
    string Name = 2;
    optional string Description = 3;
    repeated AdminAuthResourceGrpcModel Resources = 4;
}

message AdminAuthGetGroupsGrpcResponse{
    repeated AdminAuthGroupGrpcModel Groups = 1;
}

message AdminAuthCreateResourceGrpcRequest{
    string Resource = 1;
    string Description = 2;
}

message AdminAuthCreateResourceGrpcResponse{
    optional string Resource = 1;
    optional string Description = 2;
}

message AdminAuthGroupGrpcResponse{
    AdminAuthGroupGrpcModel Group = 1;
}

message AdminAuthGroupUsersGrpcResponse{
    repeated string UserLogins = 1;
}

message AdminAuthResourceGrpcModel{
    string Resource = 1;
    optional string Description = 2;
}

message AdminAuthGetResourcesGrpcResponse{
    repeated AdminAuthResourceGrpcModel Resources = 1;
}

message AdminAuthGetResourcesGrpcRequest{
    optional string Resource = 1;
}

message AdminAuthUserGrpcModel{
    string Login = 1;
    repeated string Groups = 2;
    repeated AdminAuthResourceGrpcModel Resources = 3;
    bool IsSuperAdmin = 4;
    bool IsEnabled = 5;
}

message AdminAuthGetUsersGrpcRequest{
    optional string Login = 1;
}

message AdminAuthGetUsersGrpcResponse{
    repeated AdminAuthUserGrpcModel Users = 1;
}

message AdminAuthSetSuperUserGrpcRequest{
    string Login = 1;
}

message AdminAuthSetSuperUserGrpcResponse{
    optional AuthError Error = 1;
    optional bool IsSuperAdmin = 2;
}

message AdminAuthSetEnableUserGrpcRequest{
    string Login = 1;
}

message AdminAuthSetEnableUserGrpcResponse{
    optional AuthError Error = 1;
    optional bool IsEnabled = 2;
}

service AdminAuthService {
    rpc GetResources(AdminAuthGetResourcesGrpcRequest) returns (AdminAuthGetResourcesGrpcResponse);
    rpc GetUsers(AdminAuthGetUsersGrpcRequest) returns (AdminAuthGetUsersGrpcResponse);
    rpc GetGroups(AdminAuthGetGroupsGrpcRequest) returns (AdminAuthGetGroupsGrpcResponse);
    rpc AddUserToGroup(AdminAuthAddUserToGroupGrpcRequest) returns (AdminAuthGroupUsersGrpcResponse);
    rpc RemoveUserFromGroup(AdminAuthRemoveUserFromGroupGrpcRequest) returns (AdminAuthGroupUsersGrpcResponse);
    rpc AddResourceToGroup(AdminAuthAddResourceToGroupGrpcRequest) returns (AdminAuthGroupGrpcResponse);
    rpc RemoveResourceFromGroup(AdminAuthRemoveResourceFromGroupGrpcRequest) returns (AdminAuthGroupGrpcResponse);
    rpc Register(AdminAuthRegisterUserGrpcRequest) returns (AdminAuthRegisterUserGrpcResponse);
    rpc AuthenticateGoogle(AdminAuthGoogleGrpcRequest) returns (AdminAuthGoogleGrpcResponse);
    rpc Refresh(AdminAuthRefreshGrpcRequest) returns (AdminAuthRefreshGrpcResponse);
    rpc UpdatePassword(AdminAuthUpdatePasswordGrpcRequest) returns (AdminAuthUpdatePasswordGrpcResponse);
    rpc Authenticate(AdminAuthenticateGrpcRequest) returns (AdminAuthenticateGrpcResponse);
    rpc CreateGroup(AdminAuthCreateGroupGrpcRequest) returns (AdminAuthCreateGroupGrpcResponse);
    rpc CreateResource(AdminAuthCreateResourceGrpcRequest) returns (AdminAuthCreateResourceGrpcResponse);
    rpc Validate(AdminAuthValidateJwtRequest) returns (AdminAuthValidateJwtResponse);
    rpc SetSuperUser(AdminAuthSetSuperUserGrpcRequest) returns (AdminAuthSetSuperUserGrpcResponse);
    rpc SetEnableUser(AdminAuthSetEnableUserGrpcRequest) returns (AdminAuthSetEnableUserGrpcResponse);
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}
